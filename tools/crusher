#!/bin/sh
#
# Super-mega crusher of doom
# Shrinks apks by running pngquant and/or optipng
#
# Point APKCERTS at the full path to a generated apkcerts.txt file, such as:
# /home/shade/dev/sources/android-cm-eclair/out/target/product/dream_sapphire/obj/PACKAGING/target_files_intermediates/cyanogen_dream_sapphire-target_files-eng.shade/META/apkcerts.txt
#
# cyanogen - shade@chemlab.org
# ChrisSoyars - me@ctso.me
# Nougat fixes + Improvements: Joe Maples - frap129@gmail.com
# Use tput to colorize: Matthias - spezi7713@gmx.net

set -e
QUIET=1
BASE=`pwd`
TMPDIR=/tmp/crusher-$$

if [ "$APKCERTS" = "" ];
then
    if [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
       TARGET_BUILD_VARIANT="eng"
    elif [ "$TARGET_BUILD_VARIANT" = "user" ]; then
       TARGET_BUILD_VARIANT="eng"
    fi

    APKCERTS=$OUT/obj/PACKAGING/target_files_intermediates/$TARGET_PRODUCT-target_files-$TARGET_BUILD_VARIANT.$USER/META/apkcerts.txt
    if [ ! -f "$APKCERTS" ];
    then
        tput setaf 1
        echo "Set APKCERTS to the path to your apkcerts.txt file"
        tput sgr0
        exit 1;
    fi
fi

if [ ! -f "$APKCERTS" ];
then
    tput setaf 1
    echo "Invalid path to apkcerts.txt, set APKCERTS to the correct path."
    tput sgr0
fi

if [ "$(which pngquant)" != "" ];
then
    if [ "$(which optipng)" != "" ];
    then
        OPTSTRING='Quantizing and optimizing'
        optimize_png () {
            pngquant --speed 1 --force --ext .png $1 1> /dev/null 2> /dev/null;
            optipng -o7 $1 1> /dev/null 2> /dev/null;
        }
    else
        OPTSTRING='Quantizing'
        optimize_png () {
            pngquant --speed 1 --force --ext .png $1 1> /dev/null 2> /dev/null
        }
    fi
else
    if [ "$(which optipng)" != "" ];
    then
        OPTSTRING='Optimizing'
        optimize_png () {
            optipng -o7 $1 1> /dev/null 2> /dev/null;
        }
    else
        tput setaf 1
        echo "Please install pngquant or optipng (or both, for improved crushing)"
        tput sgr0
        exit 1;
    fi
fi

if [ "`which aapt`" = "" ];
then
    tput setaf 1
    echo "Please ensure aapt is in your \$PATH"
    tput sgr0
    exit 1;
fi

if [ "`which zipalign`" = "" ];
then
    tput setaf 1
    echo "Please ensure zipalign is in your \$PATH"
    tput sgr0
    exit 1;
fi

if [ -e "$1" ];
then
    NAME=`basename $1`;
    tput setaf 2
    echo $OPTSTRING
    tput setaf 4
    echo "$NAME...";
    tput sgr0

    if [ "$2" != "" ];
    then
        CERT=build/target/product/security/$2.x509.pem
        KEY=build/target/product/security/$2.pk8
        if [ ! -f "$ANDROID_BUILD_TOP/$CERT" ];
        then
            tput setaf 1
            echo "$CERT does not exist!";
            tput sgr0
            exit 1;
        fi
    else
        APKINFO=`grep "name=\"$NAME\"" $APKCERTS`;
        [ $QUIET ] || echo "APKINFO: $APKINFO";
        if [ "$APKINFO" = "" ];
        then
            tput setaf 1
            echo "No apk info for $NAME";
            tput sgr0
            exit 1;
        fi
        CERT=`echo $APKINFO | awk {'print $2'} | cut -f 2 -d "=" | tr -d "\""`;
        KEY=`echo $APKINFO | awk {'print $3'} | cut -f 2 -d "=" | tr -d "\""`;
        if [ "$CERT" = "" ];
        then
            tput setaf 1
            echo -e "Unable to find certificate for $NAME"
            tput sgr0
            exit 1;
        fi
        if [ "$CERT" = "PRESIGNED" ];
        then
            tput setaf 7
            echo "$NAME is presigned, skipping"
            tput sgr0
            exit 1;
        fi
    fi
    tput setaf 3
    [ $QUIET ] || echo "Certificate: $CERT";
    tput sgr0

    [ -d $TMPDIR/$NAME ] && rm -rf $TMPDIR/$NAME
    mkdir -p $TMPDIR/$NAME
    trap "rm -rf $TMPDIR; exit" INT TERM EXIT
    cd $TMPDIR/$NAME
    unzip -q $BASE/$1
    for x in `find . -name "*.png" | grep -v "\.9.png$" | tr "\n" " "`
    do
        tput setaf 2 
        [ $QUIET ] || echo "Crushing $x"
        tput sgr0
        optimize_png $x
    done
    cp $BASE/$1 $BASE/$1.old
    tput setaf 2
    [ $QUIET ] || echo "Repacking apk.."
    tput sgr0
    aapt p -0 .dat -0 .dict -0 .arsc -F $NAME .
    tput setaf 3
    [ $QUIET ] || echo "Resigning with cert: `echo $CERT`"
    tput sgr0
    [ $QUIET ] || echo java -Djava.library.path=$SIGNAPK_JNI_LIBRARY_PATH -jar $ANDROID_HOST_OUT/framework/signapk.jar $ANDROID_BUILD_TOP/$CERT $ANDROID_BUILD_TOP/$KEY $NAME signed_$NAME
    java -Djava.library.path=$SIGNAPK_JNI_LIBRARY_PATH -jar $ANDROID_HOST_OUT/framework/signapk.jar $ANDROID_BUILD_TOP/$CERT $ANDROID_BUILD_TOP/$KEY $NAME signed_$NAME 
    tput setaf 2
    [ $QUIET ] || echo "Zipalign.."
    tput sgr0
    zipalign -f 4 signed_$NAME $BASE/$1
    if [ ! $QUIET ]; then
        ls -l $BASE/$1.old
        ls -l $BASE/$1
    fi
    rm $BASE/$1.old
else
    echo "Usage: $0 [apk file]"
fi
